[project]
name = "webhallen-py"
version = "0.1.0"
description = "A Python wrapper for the Webhallen API"
readme = "README.md"
requires-python = ">=3.12"
dependencies = ["httpx>=0.27.2"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python :: 3.12",
    "Natural Language :: English",
    "Natural Language :: Swedish",
]
keywords = ["webhallen", "api", "wrapper", "python"]
[project.urls]
"Bug Tracker" = "https://github.com/TheLovinator1/webhallen.py/issues"
Repository = "https://github.com/TheLovinator1/webhallen.py"


[dependency-groups]
dev = ["pytest-cov>=6.0.0", "pytest>=8.3.3", "respx>=0.21.1", "ruff>=0.8.0"]

[tool.ruff]
target-version = "py312"
fix = true
unsafe-fixes = true
preview = true
line-length = 120
lint.select = ["ALL"]
lint.pydocstyle.convention = "google"
lint.isort.required-imports = ["from __future__ import annotations"]
lint.ignore = [
    "ANN201", # Checks that public functions and methods have return type annotations.
    "ARG001", # Checks for the presence of unused arguments in function definitions.
    "B008",   # Checks for function calls in default function arguments.
    "COM812", # Checks for the absence of trailing commas. Ignored because of Ruff formatter.
    "CPY001", # Checks for the absence of copyright notices within Python files.
    "D100",   # Checks for undocumented public module definitions.
    "D104",   # Checks for undocumented public package definitions.
    "D105",   # Checks for undocumented magic method definitions.
    "D106",   # Checks for undocumented public class definitions, for nested classes.
    "ERA001", # Checks for commented-out Python code.
    "FIX002", # Checks for "TODO" comments.
    "ISC001", # Checks for implicitly concatenated strings on a single line. Ignored because of Ruff formatter.
    "RUF029", # Checks for functions declared async that do not await or otherwise use features requiring the function to be declared async.
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**.py" = [
    "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",     # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "PT001",   # Checks for argument-free @pytest.fixture() decorators
    "S101",    # asserts allowed in tests...
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001",  # Checks for accesses on "private" class members.
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "--cov=webhallen --cov-report=term-missing"
